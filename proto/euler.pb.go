// Code generated by protoc-gen-go. DO NOT EDIT.
// source: euler.proto

package euler

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SolveRequest struct {
	ProblemNumber        int32    `protobuf:"varint,1,opt,name=problem_number,json=problemNumber,proto3" json:"problem_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SolveRequest) Reset()         { *m = SolveRequest{} }
func (m *SolveRequest) String() string { return proto.CompactTextString(m) }
func (*SolveRequest) ProtoMessage()    {}
func (*SolveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bab3b8145d6fd29b, []int{0}
}

func (m *SolveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolveRequest.Unmarshal(m, b)
}
func (m *SolveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolveRequest.Marshal(b, m, deterministic)
}
func (m *SolveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolveRequest.Merge(m, src)
}
func (m *SolveRequest) XXX_Size() int {
	return xxx_messageInfo_SolveRequest.Size(m)
}
func (m *SolveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SolveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SolveRequest proto.InternalMessageInfo

func (m *SolveRequest) GetProblemNumber() int32 {
	if m != nil {
		return m.ProblemNumber
	}
	return 0
}

type SolveResponse struct {
	Numerator            int64    `protobuf:"varint,1,opt,name=numerator,proto3" json:"numerator,omitempty"`
	Denominator          int64    `protobuf:"varint,2,opt,name=denominator,proto3" json:"denominator,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SolveResponse) Reset()         { *m = SolveResponse{} }
func (m *SolveResponse) String() string { return proto.CompactTextString(m) }
func (*SolveResponse) ProtoMessage()    {}
func (*SolveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bab3b8145d6fd29b, []int{1}
}

func (m *SolveResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolveResponse.Unmarshal(m, b)
}
func (m *SolveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolveResponse.Marshal(b, m, deterministic)
}
func (m *SolveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolveResponse.Merge(m, src)
}
func (m *SolveResponse) XXX_Size() int {
	return xxx_messageInfo_SolveResponse.Size(m)
}
func (m *SolveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SolveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SolveResponse proto.InternalMessageInfo

func (m *SolveResponse) GetNumerator() int64 {
	if m != nil {
		return m.Numerator
	}
	return 0
}

func (m *SolveResponse) GetDenominator() int64 {
	if m != nil {
		return m.Denominator
	}
	return 0
}

func init() {
	proto.RegisterType((*SolveRequest)(nil), "euler.SolveRequest")
	proto.RegisterType((*SolveResponse)(nil), "euler.SolveResponse")
}

func init() { proto.RegisterFile("euler.proto", fileDescriptor_bab3b8145d6fd29b) }

var fileDescriptor_bab3b8145d6fd29b = []byte{
	// 177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2d, 0xcd, 0x49,
	0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x4c, 0xb9, 0x78, 0x82,
	0xf3, 0x73, 0xca, 0x52, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x54, 0xb9, 0xf8, 0x0a,
	0x8a, 0xf2, 0x93, 0x72, 0x52, 0x73, 0xe3, 0xf3, 0x4a, 0x73, 0x93, 0x52, 0x8b, 0x24, 0x18, 0x15,
	0x18, 0x35, 0x58, 0x83, 0x78, 0xa1, 0xa2, 0x7e, 0x60, 0x41, 0x25, 0x7f, 0x2e, 0x5e, 0xa8, 0xb6,
	0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x19, 0x2e, 0xce, 0xbc, 0xd2, 0xdc, 0xd4, 0xa2, 0xc4,
	0x92, 0x7c, 0x88, 0x16, 0xe6, 0x20, 0x84, 0x80, 0x90, 0x02, 0x17, 0x77, 0x4a, 0x6a, 0x5e, 0x7e,
	0x6e, 0x66, 0x1e, 0x58, 0x9e, 0x09, 0x2c, 0x8f, 0x2c, 0x64, 0xe4, 0xc2, 0xc5, 0xe3, 0x0a, 0x72,
	0x50, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa, 0x90, 0x09, 0x17, 0x2b, 0xd8, 0x02, 0x21, 0x61,
	0x3d, 0x88, 0xab, 0x91, 0x5d, 0x29, 0x25, 0x82, 0x2a, 0x08, 0x71, 0x83, 0x12, 0x43, 0x12, 0x1b,
	0xd8, 0x6f, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x55, 0xa3, 0x45, 0x47, 0xea, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EulerServiceClient is the client API for EulerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EulerServiceClient interface {
	Solve(ctx context.Context, in *SolveRequest, opts ...grpc.CallOption) (*SolveResponse, error)
}

type eulerServiceClient struct {
	cc *grpc.ClientConn
}

func NewEulerServiceClient(cc *grpc.ClientConn) EulerServiceClient {
	return &eulerServiceClient{cc}
}

func (c *eulerServiceClient) Solve(ctx context.Context, in *SolveRequest, opts ...grpc.CallOption) (*SolveResponse, error) {
	out := new(SolveResponse)
	err := c.cc.Invoke(ctx, "/euler.EulerService/Solve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EulerServiceServer is the server API for EulerService service.
type EulerServiceServer interface {
	Solve(context.Context, *SolveRequest) (*SolveResponse, error)
}

func RegisterEulerServiceServer(s *grpc.Server, srv EulerServiceServer) {
	s.RegisterService(&_EulerService_serviceDesc, srv)
}

func _EulerService_Solve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EulerServiceServer).Solve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/euler.EulerService/Solve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EulerServiceServer).Solve(ctx, req.(*SolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EulerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "euler.EulerService",
	HandlerType: (*EulerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Solve",
			Handler:    _EulerService_Solve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "euler.proto",
}
